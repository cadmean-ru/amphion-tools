package generators

import (
	"amphion-tools/goinspect"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var compFileTemplate = `
package {{ .Package }}

// This file is automatically generated
// DO NOT EDIT THIS FILE MANUALLY!!!

import (
	"github.com/cadmean-ru/amphion/engine"
{{ range $imp := .Imports }}
	"{{ $imp }}"
{{ end }}
)

{{ range $comp := .Components }}
func Get{{ $comp.Name }}(so *engine.SceneObject, includeDirty ...bool) *{{ $comp.PackageDot }}{{ $comp.Name }} {
	return so.GetComponentByName("{{ $comp.FullName }}", includeDirty...).(*{{ $comp.PackageDot }}{{ $comp.Name }})
}

func Find{{ $comp.Name }}(so *engine.SceneObject, includeDirty ...bool) *{{ $comp.PackageDot }}{{ $comp.Name }} {
	return so.FindComponentByName("{{ $comp.FullName }}", includeDirty...).(*{{ $comp.PackageDot }}{{ $comp.Name }})
}
{{ end }}
`

type CompFileTemplateData struct {
	Imports    []string
	Components []CompTemplateData
	Package    string
}

type CompTemplateData struct {
	Name         string
	LastPackage  string
	FullName   string
	PackageDot string
}

func Comp(data *CompFileTemplateData, dirPath string) error {
	compTmpl := template.Must(template.New("comp").Parse(compFileTemplate))

	compFile, err := os.Create(filepath.Join(dirPath, "comp.gen.go"))
	if err != nil {
		return err
	}
	defer compFile.Close()

	err = compTmpl.Execute(compFile, data)
	return nil
}

func MakeCompFileTemplateData(components []*goinspect.StructInfo, currentPackage string) *CompFileTemplateData {
	data := &CompFileTemplateData{
		Imports:    make([]string, 0),
		Components: make([]CompTemplateData, 0),
		Package:    lastPackageComponent(currentPackage),
	}

	var compType string
	for _, comp := range components {
		if comp.Package == "github.com/cadmean-ru/amphion/engine" || comp.Name == "FileDropZone" {
			continue
		}

		lastPackage := lastPackageComponent(comp.Package)

		if comp.Package != currentPackage {
			var importFound bool
			for _, i := range data.Imports {
				if i == comp.Package {
					importFound = true
					break
				}
			}

			if !importFound {
				data.Imports = append(data.Imports, comp.Package)
			}

			compType = lastPackage + "."
		}

		data.Components = append(data.Components, CompTemplateData{
			Name:        comp.Name,
			FullName:    fmt.Sprintf("%s.%s", comp.Package, comp.Name),
			LastPackage: lastPackage,
			PackageDot:  compType,
		})
	}

	return data
}

func lastPackageComponent(pack string) string {
	packageTokens := strings.Split(pack, "/")
	return packageTokens[len(packageTokens)-1]
}