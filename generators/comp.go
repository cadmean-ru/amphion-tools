package generators

import (
	"amphion-tools/goinspect"
	"amphion-tools/project"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var compFileTemplate = `
package comp

// This file is automatically generated
// DO NOT EDIT THIS FILE MANUALLY!!!

import (
	"github.com/cadmean-ru/amphion/engine"
{{ range $imp := .Imports }}
	"{{ $imp }}"
{{ end }}
)

{{ range $comp := .Components }}
const {{ $comp.LastPackageU }}_{{ $comp.Name }} = "{{ $comp.FullName }}"

func Get_{{ $comp.LastPackage }}_{{ $comp.Name }}(so *engine.SceneObject, includeDirty ...bool) *{{ $comp.LastPackage }}.{{ $comp.Name }} {
	return so.GetComponentByName("{{ $comp.FullName }}", includeDirty...).(*{{ $comp.LastPackage }}.{{ $comp.Name }})
}

func Find_{{ $comp.LastPackage }}_{{ $comp.Name }}(so *engine.SceneObject, includeDirty ...bool) *{{ $comp.LastPackage }}.{{ $comp.Name }} {
	return so.FindComponentByName("{{ $comp.FullName }}", includeDirty...).(*{{ $comp.LastPackage }}.{{ $comp.Name }})
}
{{ end }}
`

type CompFileTemplateData struct {
	Imports    []string
	Components []CompTemplateData
}

type CompTemplateData struct {
	Name         string
	LastPackage  string
	FullName     string
	LastPackageU string
}

func Comp(data *CompFileTemplateData, projPath string, config *project.Config) error {
	codePath := filepath.Join(projPath, config.Name)
	compTmpl := template.Must(template.New("comp").Parse(compFileTemplate))

	_ = os.MkdirAll(filepath.Join(codePath, "generated", "comp"), os.FileMode(0777))

	compFile, err := os.Create(filepath.Join(codePath, "generated", "comp", "comp.gen.go"))
	if err != nil {
		return err
	}
	defer compFile.Close()

	err = compTmpl.Execute(compFile, data)
	return nil
}

func MakeCompFileTemplateData(components []*goinspect.StructInfo) *CompFileTemplateData {
	data := &CompFileTemplateData{
		Imports:    make([]string, 0),
		Components: make([]CompTemplateData, 0),
	}

	for _, comp := range components {
		var importFound bool
		for _, i := range data.Imports {
			if i == comp.Package {
				importFound = true
				break
			}
		}

		if !importFound {
			data.Imports = append(data.Imports, comp.Package)
		}

		packageTokens := strings.Split(comp.Package, "/")
		lastPackage := packageTokens[len(packageTokens)-1]
		lastPackageU := strings.ToUpper(string(lastPackage[0])) + lastPackage[1:]

		data.Components = append(data.Components, CompTemplateData{
			Name:         comp.Name,
			FullName:     fmt.Sprintf("%s.%s", comp.Package, comp.Name),
			LastPackage:  lastPackage,
			LastPackageU: lastPackageU,
		})
	}

	return data
}
