package generators

import (
	"amphion-tools/project"
	"os"
	"path/filepath"
	"text/template"
)

var compFileTemplate = `
package comp

// This file is automatically generated
// DO NOT EDIT THIS FILE MANUALLY!!!

import (
	"github.com/cadmean-ru/amphion/engine"
{{ range $imp := .Imports }}
	"{{ $imp }}"
{{ end }}
)

{{ range $comp := .Components }}
	const {{ $comp.LastPackage }}_{{ $comp.Name }} = "{{ $comp.FullName }}"

	func Get_{{ $comp.LastPackage }}_{{ $comp.Name }}(so *engine.SceneObject, includeDirty ...bool) *{{ $comp.LastPackage }}{{ $comp.Name }} {
		return so.GetComponentByName({{ $comp.FullName }}, includeDirty...).(*{{ $comp.LastPackage }}.{{ $comp.Name }})
	}

	func Get_{{ $comp.LastPackage }}_{{ $comp.Name }}(so *engine.SceneObject, includeDirty ...bool) *{{ $comp.LastPackage }}{{ $comp.Name }} {
		return so.FindComponentByName({{ $comp.FullName }}, includeDirty...).(*{{ $comp.LastPackage }}.{{ $comp.Name }})
	}

{{ end }}
`

type CompFileTemplateData struct {
	Imports    []string
	Components []CompTemplateData
}

type CompTemplateData struct {
	Name        string
	LastPackage string
	FullName    string
}

func Comp(data CompFileTemplateData, projPath string, config *project.Config) error {
	codePath := filepath.Join(projPath, config.Name)
	compTmpl := template.Must(template.New("comp").Parse(compFileTemplate))

	_ = os.MkdirAll(filepath.Join(codePath, "generated", "comp"), os.FileMode(0777))

	compFile, err := os.Create(filepath.Join(codePath, "generated", "comp", "comp.gen.go"))
	if err != nil {
		return err
	}
	defer compFile.Close()

	err = compTmpl.Execute(compFile, data)
	return nil
}
