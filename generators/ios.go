package generators

import (
	"amphion-tools/project"
	"os"
	"path/filepath"
	"text/template"
)

const mainIosFileTemplate = `
package main

// This file is automatically generated
// DO NOT EDIT THIS FILE MANUALLY!!!

func runApp() {
	
}
`

var iosTemplate = `
//+build ios

package iosCli

// This file is automatically generated
// DO NOT EDIT THIS FILE MANUALLY!!!

import (
	"fmt"
	"github.com/cadmean-ru/amphion/engine"
	"github.com/cadmean-ru/amphion/engine/builtin"
	"github.com/cadmean-ru/amphion/frontend"
	"github.com/cadmean-ru/amphion/frontend/ios"
	"github.com/cadmean-ru/amphion/frontend/cli"
	"AmphionLand/components"
)

var front frontend.Frontend

//var registerComponents func(cm *engine.ComponentsManager)

func AmphionInitIos(f cli.FrontendDelegate, rm cli.ResourceManagerDelegate, rd cli.RendererDelegate) {
	fmt.Println("AmphionInitIos")
	front = ios.NewFrontend(f, rm, rd)
	front.Init()

	fmt.Println("AmphionInitIos 1")
	e := engine.Initialize(front)

	fmt.Println("AmphionInitIos 2")
	
	cm := e.GetComponentsManager()
	cm.RegisterComponentType(&builtin.ShapeView{})
	cm.RegisterComponentType(&builtin.CircleBoundary{})
	cm.RegisterComponentType(&builtin.OnClickListener{})
	cm.RegisterComponentType(&builtin.TextView{})
	cm.RegisterComponentType(&builtin.RectBoundary{})
	cm.RegisterComponentType(&builtin.TriangleBoundary{})
	cm.RegisterComponentType(&builtin.BezierView{})
	cm.RegisterComponentType(&builtin.DropdownView{})
	cm.RegisterComponentType(&builtin.ImageView{})
	cm.RegisterComponentType(&builtin.MouseMover{})
	cm.RegisterComponentType(&builtin.BuilderComponent{})
	cm.RegisterComponentType(&builtin.GridLayout{})
	cm.RegisterComponentType(&builtin.NativeInputView{})
	cm.RegisterComponentType(&builtin.EventListener{})

	fmt.Println("AmphionInitIos 3")

	registerComponents(cm)

	fmt.Println("AmphionInitIos 4")
	
	{{ if (gt (len .Resources) 0) }}
	rm1 := e.GetResourceManager()
		{{ range $res := .Resources }}
	rm1.RegisterResource("{{ $res }}")
		{{ end }}
	{{ end }}

	fmt.Println("AmphionInitIos 5")

	go func() {
		e.Start()
		e.LoadApp()
	}()

	go front.Run()
}

func registerComponents(cm *engine.ComponentsManager) {
	cm.RegisterComponentType(&components.TestComponent{})
	cm.RegisterComponentType(&components.InputField{})
	cm.RegisterComponentType(&components.MainSceneController{})
	cm.RegisterComponentType(&components.Selection{})
	cm.RegisterComponentType(&components.Zooming{})
	cm.RegisterComponentType(&components.LoginSceneController{})
	cm.RegisterComponentType(&builtin.NativeInputView{})
	cm.RegisterComponentType(&components.WidgetGrid{})
	cm.RegisterComponentType(&components.WodgetController{})
	cm.RegisterComponentType(&components.EmptyBox{})
	cm.RegisterComponentType(&components.SearchAlgorithm{})
	cm.RegisterComponentType(&components.EditorController{})
	cm.RegisterComponentType(&components.PrefabViewerController{})
	cm.RegisterComponentType(&components.ClickAndInspeceet{})
	cm.RegisterComponentType(&components.EditorGrid{})
	cm.RegisterComponentType(&components.WeatherController{})
	cm.RegisterEventHandler(components.OnClick)
}

func RegisterPrimitiveRendererDelegate(primitiveKind int, delegate cli.PrimitiveRendererDelegate) {
	front.GetRenderer().RegisterPrimitiveRendererDelegate(byte(primitiveKind), cli.NewPrimitiveRendererDelegateWrap(delegate))
}

func GetRenderingPerformer() *cli.ExecDelegate {
	return cli.NewExecDelegate(front.GetRenderer().GetRenderingPerformer())
}

func GetRendererPrepareDelegate() *cli.ExecDelegate {
	return cli.NewExecDelegate(front.GetRenderer().Prepare)
}
`

func IosMain(data *MainTemplateData, projPath string, config *project.Config, runConfig *project.RunConfig) error {
	return generateMainFile(data, mainIosFileTemplate, projPath, config, runConfig)
}

func Ios(data *MainTemplateData, projPath string, config *project.Config, runConfig *project.RunConfig) (err error) {
	codePath := filepath.Join(projPath, config.Name)
	iosPath := filepath.Join(codePath, "generated", "iosCli")

	mainTmpl := template.Must(template.New("main").Parse(iosTemplate))

	os.MkdirAll(iosPath, os.FileMode(0777))

	mainFile, err := os.Create(filepath.Join(iosPath, "ios.gen.go"))
	if err != nil {
		return
	}
	defer mainFile.Close()

	err = mainTmpl.Execute(mainFile, *data)
	return
}
